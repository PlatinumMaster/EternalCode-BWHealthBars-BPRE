#!/usr/bin/env python

from pathlib import Path
import os
import itertools
import hashlib
import subprocess
import sys
import platform

PATH = os.path.join(os.environ['DEVKITARM'], 'bin') if platform.system() != 'Windows' else os.path.join('C:\\', 'devkitPro', 'devkitARM', 'bin')
PREFIX = 'arm-none-eabi-'
AS = os.path.join(PATH, PREFIX + 'as')
CC = os.path.join(PATH, PREFIX + 'gcc')
LD = os.path.join(PATH, PREFIX + 'ld')
OBJCOPY = os.path.join(PATH, PREFIX + 'objcopy')
SIZE = os.path.join(PATH, PREFIX + 'size')
SRC = 'src'
BUILD = 'build'
ASFLAGS = ['-mthumb', '-I', SRC]
LDFLAGS = ['-z', 'muldefs', '-T',  os.path.join('linker', 'BPRE.ld'), '-T', os.path.join('linker', 'linker.ld')]
CFLAGS= ['-mthumb', '-mno-thumb-interwork', '-mcpu=arm7tdmi',
         '-fno-inline', '-mlong-calls', '-march=armv4t', '-Wall', '-g', '-O3']

def run_command(cmd):
    try:
        return subprocess.check_output(cmd).decode()
    except subprocess.CalledProcessError as e:
        print(e.output.decode(), file=sys.stderr)
        print(cmd)
        sys.exit(1)

def make_output_file(filename):
    '''Return hash of filename to use as object filename'''
    m = hashlib.md5()
    m.update(filename.encode())
    return os.path.join(BUILD, m.hexdigest() + '.o')

def process_assembly(in_file):
    '''Assemble'''
    out_file = make_output_file(in_file)
    cmd = [AS] + ASFLAGS + ['-c', in_file, '-o', out_file]
    run_command(cmd)
    return out_file

def process_c(in_file):
    '''Compile C'''
    out_file = make_output_file(in_file)
    cmd = [CC] + CFLAGS + ['-c', in_file, '-o', out_file]
    run_command(cmd)
    return out_file

def link(objects):
    '''Link objects into one binary'''
    linked = os.path.join('build', 'linked.o')
    cmd = [LD] + LDFLAGS + ['-o', linked] + list(objects)
    run_command(cmd)
    return linked

def determine_size(objects):
    cmd = [SIZE] + objects
    # Remove column headings
    rows = run_command(cmd).strip().split('\n')[1:]

    # Get only first column (as integers)
    text_column = (int(col.strip().split()[0]) for col in rows)

    return sum(text_column)

def objcopy(binary):
    cmd = [OBJCOPY, '-O', 'binary', binary, os.path.join('build', 'output.bin')]
    run_command(cmd)

import glob    
def run_glob(globstr, fn):
    '''Glob recursively and run the processor function on each file in result'''
    files = [str(path) for path in Path(SRC).glob(globstr)]
    return map(fn, files)

def main():
    globs = {
        '**/*.s': process_assembly,
        '**/*.c': process_c
    }

    # Create output directory
    try:
        os.makedirs(BUILD)
    except FileExistsError:
        pass

    # Gather source files and process them
    objects = itertools.starmap(run_glob, globs.items())

    # Link and extract raw binary
    try:
        all_objects = list(itertools.chain.from_iterable(objects))
    except:
        print(PATH)
    size = determine_size(all_objects)
    print('Code will use', size, 'bytes of space')
    linked = link(all_objects)
    objcopy(linked)

if __name__ == '__main__':
    main()